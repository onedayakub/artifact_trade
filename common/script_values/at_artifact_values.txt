# Difference between the QWA of the scoped artifact
# and the QWA of the n-th artifact of the same type owned and equippable by scope:buyer,
# where n is the number of slots for the artifact's slot type.
at_nth_buyer_equippable_artifact_quality_wealth_average_difference_value = {
	value = at_artifact_quality_wealth_average_value
	save_temporary_scope_as = artifact
	subtract = scope:buyer.at_nth_equippable_artifact_quality_wealth_average_value
}

# Difference between the QWA of the scoped artifact
# and the QWA of the n+1-th artifact of the same type owned and equippable by scope:seller,
# where n is the number of slots for the artifact's slot type.
at_np1th_seller_equippable_artifact_quality_wealth_average_difference_value = {
	value = at_artifact_quality_wealth_average_value
	save_temporary_scope_as = artifact
	subtract = scope:seller.at_np1th_equippable_artifact_quality_wealth_average_value
}

at_nth_equippable_artifact_quality_wealth_average_value = {
	save_temporary_scope_as = owner
	value = 0
	if = {
		limit = {
			scope:artifact = { artifact_slot_type = primary_armament }
			any_character_artifact = {
				artifact_slot_type = primary_armament
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 1
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = primary_armament
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 0
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = armor }
			any_character_artifact = {
				artifact_slot_type = armor
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 1
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = armor
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 0
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = regalia }
			any_character_artifact = {
				artifact_slot_type = regalia
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 1
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = regalia
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 0
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = helmet }
			any_character_artifact = {
				artifact_slot_type = helmet
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 1
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = helmet
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 0
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = miscellaneous }
			any_character_artifact = {
				artifact_slot_type = miscellaneous
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 4
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = miscellaneous
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 3
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = throne }
			any_character_artifact = {
				artifact_slot_type = throne
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 1
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = throne
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 0
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = wall_big }
			any_character_artifact = {
				artifact_slot_type = wall_big
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 3
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = wall_big
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 2
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = wall_small }
			any_character_artifact = {
				artifact_slot_type = wall_small
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 3
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = wall_small
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 2
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = sculpture }
			any_character_artifact = {
				artifact_slot_type = sculpture
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = sculpture
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = book }
			any_character_artifact = {
				artifact_slot_type = book
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = book
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = pedestal }
			any_character_artifact = {
				artifact_slot_type = pedestal
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 4
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = pedestal
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 3
			add = at_artifact_quality_wealth_average_value
		}
	}
}

at_np1th_equippable_artifact_quality_wealth_average_value = {
	save_temporary_scope_as = owner
	value = 0
	if = {
		limit = {
			scope:artifact = { artifact_slot_type = primary_armament }
			any_character_artifact = {
				artifact_slot_type = primary_armament
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = primary_armament
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = armor }
			any_character_artifact = {
				artifact_slot_type = armor
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = armor
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = regalia }
			any_character_artifact = {
				artifact_slot_type = regalia
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = regalia
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = helmet }
			any_character_artifact = {
				artifact_slot_type = helmet
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = helmet
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = miscellaneous }
			any_character_artifact = {
				artifact_slot_type = miscellaneous
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 5
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = miscellaneous
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 4
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = throne }
			any_character_artifact = {
				artifact_slot_type = throne
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 2
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = throne
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 1
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = wall_big }
			any_character_artifact = {
				artifact_slot_type = wall_big
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 4
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = wall_big
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 3
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = wall_small }
			any_character_artifact = {
				artifact_slot_type = wall_small
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 4
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = wall_small
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 3
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = sculpture }
			any_character_artifact = {
				artifact_slot_type = sculpture
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 3
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = sculpture
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 2
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = book }
			any_character_artifact = {
				artifact_slot_type = book
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 3
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = book
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 2
			add = at_artifact_quality_wealth_average_value
		}
	}
	else_if = {
		limit = {
			scope:artifact = { artifact_slot_type = pedestal }
			any_character_artifact = {
				artifact_slot_type = pedestal
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
				count >= 5
			}
		}
		ordered_character_artifact = {
			limit = {
				artifact_slot_type = pedestal
				at_is_artifact_equppable_and_beneficial_trigger = { CHARACTER = scope:owner }
			}
			order_by = at_artifact_quality_wealth_average_value
			position = 4
			add = at_artifact_quality_wealth_average_value
		}
	}
}

# Artifact quality and wealth average (QWA).
# Preferred over artifact_wealth_quality_average_value since some artifacts don't have
# var:quality or var:wealth, and scope:quality and scope:wealth are usually not set.
at_artifact_quality_wealth_average_value = {
	value = at_artifact_quality_value
	add = at_artifact_wealth_value
	multiply = 0.5
}

# Artifact quality. Uses var:quality or scope:quality,
# falls back to at_artifact_default_quality_wealth_value if neither is set.
at_artifact_quality_value = {
	if = {
		limit = { exists = var:quality }
		value = var:quality
	}
	else_if = {
		limit = { exists = scope:quality }
		value = scope:quality
	}
	else_if = {
		limit = { exists = var:unwanted_artifact }
		value = 5
	}
	else_if = {
		limit = { exists = var:platypus_trinket }
		value = 25
	}
	else_if = {
		limit = {
			OR = {
				exists = var:mythical_horn_trinket
				exists = var:mythical_creature_figurine_trinket
				exists = var:st_davids_taper_trinket
				exists = var:jira_stick_trinket
				exists = var:lucky_coin_trinket
				exists = var:lavender_jade_pendant_trinket
			}
		}
		value = 45
	}
	else_if = {
		limit = {
			OR = {
				exists = var:sekhmet_ring_trinket
				exists = var:ancient_scarab_brooch_trinket
			}
		}
		value = 65
	}
	else_if = {
		limit = { exists = var:small_wooden_carving_artifact }
		value = 20
	}
	else = {
		value = at_artifact_default_quality_wealth_value
	}
}

# Artifact wealth. Uses var:wealth or scope:wealth,
# falls back to at_artifact_default_quality_wealth_value if neither is set.
at_artifact_wealth_value = {
	if = {
		limit = { exists = var:wealth }
		value = var:wealth
	}
	else_if = {
		limit = { exists = scope:wealth }
		value = scope:wealth
	}
	else_if = {
		limit = { exists = var:unwanted_artifact }
		value = 5
	}
	else_if = {
		limit = { exists = var:platypus_trinket }
		value = 25
	}
	else_if = {
		limit = {
			OR = {
				exists = var:mythical_horn_trinket
				exists = var:mythical_creature_figurine_trinket
				exists = var:st_davids_taper_trinket
				exists = var:jira_stick_trinket
				exists = var:lucky_coin_trinket
				exists = var:lavender_jade_pendant_trinket
			}
		}
		value = 45
	}
	else_if = {
		limit = {
			OR = {
				exists = var:sekhmet_ring_trinket
				exists = var:ancient_scarab_brooch_trinket
			}
		}
		value = 65
	}
	else_if = {
		limit = { exists = var:small_wooden_carving_artifact }
		value = 10
	}
	else = {
		value = at_artifact_default_quality_wealth_value
	}
}

# Default artifact quality / wealth value per rarity.
# Values correspond to set_artifact_rarity_* effects for historical artifacts.
at_artifact_default_quality_wealth_value = {
	if = {
		limit = { rarity = common }
		value = 15
	}
	else_if = {
		limit = { rarity = masterwork }
		value = 30
	}
	else_if = {
		limit = { rarity = famed }
		value = 70
	}
	else_if = {
		limit = { rarity = illustrious }
		value = 100
	}
}

# Artifact repair cost, corresponds to repair_artifact cost.
at_artifact_repair_cost_value = {
	value = 25
	multiply = at_artifact_repair_cost_durability_multiplier
	multiply = at_artifact_repair_cost_quality_wealth_multiplier
	floor = yes
}

# Durability multiplier for calculating the artifact repair cost.
at_artifact_repair_cost_durability_multiplier = {
	value = 1
	if = {
		limit = {
			artifact_durability >= 80
			artifact_durability < 100
		}
		divide = 2
	}
	else_if = {
		limit = {
			artifact_durability >= 20
			artifact_durability < 50
		}
		multiply = 2
	}
	else_if = {
		limit = {
			artifact_durability >= 5
			artifact_durability < 20
		}
		multiply = 3
	}
	else_if = {
		limit = {
			artifact_durability < 5
		}
		multiply = 5
	}
}

# QWA multiplier for calculating the artifact repair cost.
at_artifact_repair_cost_quality_wealth_multiplier = {
	value = 1
	if = {
		limit = {
			at_artifact_quality_wealth_average_value >= 75
		}
		multiply = 5
	}
	else_if = {
		limit = {
			at_artifact_quality_wealth_average_value >= 50
			at_artifact_quality_wealth_average_value < 75
		}
		multiply = 2
	}
	else_if = {
		limit = {
			at_artifact_quality_wealth_average_value < 25
		}
		divide = 2
	}
}

# Artifact base price, calculated using the formula from "Auction Off Artifact".
at_artifact_base_price_aoa_value = {
	# Rarity
	if = {
		limit = { rarity = common }
		value = 50
	}
	else_if = {
		limit = { rarity = masterwork }
		value = 75
	}
	else_if = {
		limit = { rarity = famed }
		value = 125
	}
	else_if = {
		limit = { rarity = illustrious }
		value = 250
	}

	# Durability
	multiply = {
		value = artifact_durability
		divide = artifact_max_durability
	}

	# Uniqueness
	if = {
		limit = { at_is_unique_artifact_trigger = yes }
		multiply = 3
	}

	# Minimum
	min = 15
}

# Artifact base price, calculated using a formula similar to the one
# from "Auction Off Artifact", but using QWA and a multiplier instead
at_artifact_base_price_value = {
	# QWA
	value = at_artifact_quality_wealth_average_value
	multiply = 2.5

	# Durability
	multiply = {
		value = artifact_durability
		divide = artifact_max_durability
	}

	# Uniqueness
	if = {
		limit = { at_is_unique_artifact_trigger = yes }
		multiply = 3
	}

	# Minimum
	min = 10
}

# Artifact ask price. Calculated by multiplying the base price by several multipliers:
# - at_artifact_ask_price_player_multiplier if scope:actor is human
# - a scope:seller personality multiplier based on ai_greed
at_artifact_ask_price_value = {
	value = at_artifact_base_price_value

	# Make it higher for the player
	if = {
		limit = {
			scope:actor = { is_ai = no }
		}
		multiply = at_artifact_ask_price_player_multiplier
	}

	# Seller personality multiplier (0.87 to 1.13 based on ai_greed)
	# Chosen so that 0.83 * 1.2 = 1
	multiply = {
		value = scope:seller.ai_greed
		multiply = 0.0017
		add = 1
	}

	round = yes
	min = 1
}

# Artifact bid price. Calculated by multiplying the base price by several multipliers:
# - at_artifact_bid_price_player_multiplier if scope:actor is human
# - a scope:buyer personality multiplier based on ai_greed
at_artifact_bid_price_value = {
	value = at_artifact_base_price_value

	# Make it lower for the player
	if = {
		limit = {
			scope:actor = { is_ai = no }
		}
		multiply = at_artifact_bid_price_player_multiplier
	}

	# Buyer personality multiplier (0.83 to 1.17 based on ai_greed)
	# Chosen so that 1.25 * 0.8 = 1
	multiply = {
		value = scope:buyer.ai_greed
		multiply = -0.0025
		add = 1
	}

	round = yes
	min = 1
}

# AI accept value of the Buy Artifact interaction, used in effects to evaluate whether
# scope:seller would accept the interaction initiated by scope:actor with the scoped artifact as target.
# Must exactly match the ai_accept section of at_buy_artifact_interaction.
at_buy_artifact_ai_accept_value = {
	save_temporary_scope_as = artifact
	value = 25

	# Artifact recently bought
	if = {
		limit = {
			scope:artifact = {
				has_variable = at_artifact_recently_bought
			}
		}
		add = -100
	}

	# Difference between the QWA of the target artifact
	# and the QWA of the n+1-th artifact of the same type owned and equippable by scope:seller
	if = {
		limit = {
			scope:seller = {
				at_can_equip_and_benefit_from_artifact_trigger = { ARTIFACT = scope:artifact }
			}
			scope:artifact.at_np1th_seller_equippable_artifact_quality_wealth_average_difference_value > 0
		}
		add = {
			value = scope:artifact.at_np1th_seller_equippable_artifact_quality_wealth_average_difference_value
			multiply = at_ai_negative_qwa_difference_impact_value
		}
	}

	# Artifact durability (0 to PIV)
	if = {
		limit = {
			scope:artifact.artifact_durability < scope:artifact.artifact_max_durability
		}
		add = {
			value = scope:artifact.artifact_max_durability
			subtract = scope:artifact.artifact_durability
			divide = scope:artifact.artifact_max_durability
			multiply = at_ai_positive_durability_impact_value
		}
	}

	# Artifact uniqueness (NIV if unique)
	if = {
		limit = {
			scope:artifact = { at_is_unique_artifact_trigger = yes }
		}
		add = at_ai_negative_uniqueness_impact_value
	}

	# Artifact religion (NIV if the right religion)
	if = {
		limit = {
			scope:seller = {
				at_has_artifact_relic_religion_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = at_ai_negative_religion_impact_value
	}

	# TODO Artifact modifiers and recipient lifestyle

	# Useless, not relevant, unwanted, or cursed artifacts
	if = {
		limit = {
			scope:seller = {
				NOT = { can_equip_artifact = scope:artifact }
			}
		}
		add = 100
	}
	if = {
		limit = {
			scope:seller = {
				NOT = { can_benefit_from_artifact = scope:artifact }
			}
		}
		add = 100
	}
	if = {
		limit = {
			scope:artifact = { has_variable = unwanted_artifact }
		}
		add = 100
	}
	if = {
		limit = {
			scope:artifact = { has_variable = cursed_artifact }
		}
		add = 200
	}

	# Dynasty or house banner
	if = {
		limit = {
			scope:seller = {
				at_is_dynasty_banner_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = -50
	}
	if = {
		limit = {
			scope:seller = {
				at_is_house_banner_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = -50
	}

	# Holds succession title
	if = {
		limit = {
			scope:seller = {
				at_has_artifact_succession_title_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = -50
	}

	# Price (NIV if price < minor_gold_value, PIV if price > major_gold_value)
	if = {
		limit = {
			scope:artifact.at_artifact_ask_price_value < scope:seller.minor_gold_value
		}
		add = at_ai_negative_price_impact_value
	}
	else_if = {
		limit = {
			scope:artifact.at_artifact_ask_price_value > scope:seller.major_gold_value
		}
		add = at_ai_positive_price_impact_value
	}

	# Opinion of actor
	add = {
		value = scope:opinion_of_actor
		multiply = at_buy_sell_artifact_ai_opinion_multiplier
		floor = yes
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			scope:seller = {
				has_relation_rival = scope:actor
			}
		}
		add = -100
	}
	if = {
		limit = {
			scope:seller = {
				has_relation_nemesis = scope:actor
			}
		}
		add = -200
	}

	# Not enough gold
	if = {
		limit = {
			scope:actor = {
				trigger_if = {
					limit = { is_ai = yes }
					short_term_gold < scope:artifact.at_artifact_ask_price_value
				}
				trigger_else = {
					gold < scope:artifact.at_artifact_ask_price_value
				}
			}
		}
		multiply = 0
	}
}

# AI accept value of the Sell Artifact interaction, used in effects to evaluate whether
# the scoped character would accept the interaction initiated by scope:actor with scope:artifact as target.
# Must exactly match the ai_accept section of at_sell_artifact_interaction.
at_sell_artifact_ai_accept_value = {
	save_temporary_scope_as = buyer
	value = -50

	# Avoid spending money if at war
	if = {
		limit = {
			is_at_war = yes
		}
		add = -50
	}

	# Artifact claims
	if = {
		limit = {
			scope:artifact = { can_be_claimed_by = scope:buyer }
		}
		add = at_ai_positive_claim_impact_value
	}

	# Difference between the QWA of the target artifact
	# and the QWA of the n-th artifact of the same type owned and equippable by scope:buyer
	if = {
		limit = {
			at_can_equip_and_benefit_from_artifact_trigger = { ARTIFACT = scope:artifact }
			scope:artifact.at_nth_buyer_equippable_artifact_quality_wealth_average_difference_value > 0
		}
		add = {
			value = scope:artifact.at_nth_buyer_equippable_artifact_quality_wealth_average_difference_value
			multiply = at_ai_positive_qwa_difference_impact_value
		}
	}

	# Artifact durability (0 to NIV)
	if = {
		limit = {
			scope:artifact.artifact_durability < scope:artifact.artifact_max_durability
		}
		add = {
			value = scope:artifact.artifact_max_durability
			subtract = scope:artifact.artifact_durability
			divide = scope:artifact.artifact_max_durability
			multiply = at_ai_negative_durability_impact_value
		}
	}

	# Artifact uniqueness (PIV if unique)
	if = {
		limit = {
			scope:artifact = { at_is_unique_artifact_trigger = yes }
		}
		add = at_ai_positive_uniqueness_impact_value
	}

	# Artifact religion (PIV if the right religion)
	if = {
		limit = {
			at_has_artifact_relic_religion_trigger = { ARTIFACT = scope:artifact }
		}
		add = at_ai_positive_religion_impact_value
	}

	# TODO Artifact modifiers and recipient lifestyle

	# Useless, not relevant, unwanted, or cursed artifacts
	if = {
		limit = {
			NOT = { can_equip_artifact = scope:artifact }
		}
		add = -100
	}
	if = {
		limit = {
			NOT = { can_benefit_from_artifact = scope:artifact }
		}
		add = -100
	}
	if = {
		limit = {
			scope:artifact = { has_variable = unwanted_artifact }
		}
		add = -100
	}
	if = {
		limit = {
			scope:artifact = { has_variable = cursed_artifact }
		}
		add = -200
	}

	# Dynasty or house banner
	if = {
		limit = {
			scope:buyer = {
				at_is_dynasty_banner_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = 50
	}
	if = {
		limit = {
			scope:buyer = {
				at_is_house_banner_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = 50
	}

	# Holds succession title
	if = {
		limit = {
			scope:buyer = {
				at_has_artifact_succession_title_trigger = { ARTIFACT = scope:artifact }
			}
		}
		add = 50
	}

	# Price (PIV if price < minor_gold_value, NIV if price > major_gold_value)
	if = {
		limit = {
			scope:artifact.at_artifact_bid_price_value < scope:buyer.minor_gold_value
		}
		add = at_ai_positive_price_impact_value
	}
	else_if = {
		limit = {
			scope:artifact.at_artifact_bid_price_value > scope:buyer.major_gold_value
		}
		add = at_ai_negative_price_impact_value
	}

	# Opinion of actor
	add = {
		value = scope:opinion_of_actor
		multiply = at_buy_sell_artifact_ai_opinion_multiplier
		floor = yes
	}

	# Avoid doing business with rivals or nemesises
	if = {
		limit = {
			has_relation_rival = scope:actor
		}
		add = -100
	}
	if = {
		limit = {
			has_relation_nemesis = scope:actor
		}
		add = -200
	}
}

# Artifact trading range, depends on title tier.
at_artifact_trading_range_value = {
	if = {
		limit = { highest_held_title_tier = tier_empire }
		value = squared_distance_almost_massive
	}
	else_if = {
		limit = { highest_held_title_tier = tier_kingdom }
		value = squared_distance_huge
	}
	else_if = {
		limit = { highest_held_title_tier = tier_duchy }
		value = squared_distance_large
	}
	else_if = {
		limit = { highest_held_title_tier = tier_county }
		value = squared_distance_medium
	}
	else = {
		value = squared_distance_small
	}
}

# Used in localization.
at_scope_buyer_current_gold_value = {
	value = scope:buyer.short_term_gold
}

# Used in localization.
at_scope_artifact_price_value = {
	value = scope:artifact_price
}