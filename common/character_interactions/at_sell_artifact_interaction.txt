# Sell one of your artifacts to another ruler.
# Scopes: actor is the artifact owner (seller), recipient is the buyer, target is the artifact.
at_sell_artifact_interaction = {
	category = interaction_category_diplomacy
	desc = at_sell_artifact_interaction_desc
	interface_priority = 60
	common_interaction = yes
	needs_recipient_to_open = yes
	icon = artisan_inspiration

	target_type = artifact
	target_filter = actor_artifacts

	greeting = positive
	send_name = at_sell_artifact_interaction

	# TODO Debug
	ai_min_reply_days = 0
	ai_max_reply_days = 0

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		scope:actor = {
			at_potential_buyer_or_seller_trigger = { CHARACTER = scope:recipient }
		}
		scope:actor = {
			has_any_artifact = yes
		}
		NAND = { # Prevent ai from spamming you with sell artifact requests
			scope:actor = { is_ai = yes }
			scope:recipient = { is_ai = no }
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			at_candidate_to_buy_or_sell_trigger = yes
		}
		scope:actor = {
			is_imprisoned = no
			trigger_if = {
				limit = { is_ai = no }
				custom_description = {
					text = "any_unequipped_artifact_tt"
					any_character_artifact = {
						is_equipped = no
					}
				}
			}
		}
	}

	can_be_picked_artifact = {
		trigger_if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:target = { is_equipped = no }
		}
		scope:actor = {
			any_character_artifact = {
				this = scope:target
			}
		}
	}

	on_accept = {
		scope:actor = { save_scope_as = seller }
		scope:recipient = { save_scope_as = buyer }
		scope:target = { save_scope_as = artifact }
		at_buy_artifact_interaction_effect = {
			PRICE = scope:artifact.at_artifact_bid_price_minus_repair_cost_value
		}
	}

	auto_accept = no

	ai_accept = {
		base = 0

		modifier = {
			add = -50
			desc = "GOLD_NEGATIVE_REASON"
		}

		# Avoid spending money if at war (-50)
		modifier = {
			is_at_war = yes
			add = -50
			desc = "IS_AT_WAR_REASON"
		}

		# Artifact claims (25)
		modifier = {
			scope:target = { can_be_claimed_by = scope:recipient }
			add = 25
			desc = "ARTIFACT_CLAIM_REASON"
		}

		# Difference between the QWA of the target artifact
		# and the QWA of the worst artifact of the same type equipped by the recipient (0 to 200)
		modifier = {
			scope:target.at_artifact_quality_wealth_average_difference_value > 0
			add = {
				value = scope:target.at_artifact_quality_wealth_average_difference_value
				multiply = at_buy_sell_artifact_quality_wealth_difference_multiplier
			}
			desc = "at_target_better_than_currently_equipped_reason"
		}

		# Artifact durability (0 to -50)
		modifier = {
			scope:target.artifact_durability < scope:target.artifact_max_durability
			add = {
				value = -50
				multiply = {
					value = scope:target.artifact_max_durability
					subtract = scope:target.artifact_durability
					divide = scope:target.artifact_max_durability
				}
			}
			desc = "at_target_below_max_durability_reason"
		}

		# TODO Artifact modifiers and recipient lifestyle (0 to 25)

		# Useless, not relevant, unwanted, or cursed artifacts
		modifier = {
			NOT = { can_equip_artifact = scope:target }
			add = -100
			desc = "ARTIFACT_NOT_EQUIPPABLE_REASON"
		}
		modifier = {
			NOT = { can_benefit_from_artifact = scope:target }
			add = -50
			desc = "ARTIFACT_NOT_BENEFIT_REASON"
		}
		modifier = {
			scope:target = { has_variable = unwanted_artifact }
			add = -500
			desc = "ARTIFACT_CURSED_REASON"
		}
		modifier = {
			scope:target = { has_variable = cursed_artifact }
			add = -1000
			desc = "ARTIFACT_CURSED_REASON"
		}

		# Banners
		modifier = {
			exists = scope:target.var:banner_dynasty
			exists = scope:recipient.dynasty
			scope:recipient = scope:target.var:banner_dynasty.dynast
			add = 25
			desc = "ARTIFACT_DYNASTY_BANNER_REASON"
		}
		modifier = {
			OR = {
				exists = scope:target.var:banner_dynasty
				exists = scope:target.var:banner_house
			}
			exists = scope:recipient.house
			trigger_if = {
				limit = { exists = scope:target.var:banner_dynasty }
				NOT = { scope:target.var:banner_dynasty = scope:recipient.dynasty }
			}
			trigger_else = {
				NOT = { scope:target.var:banner_house = scope:recipient.house }
			}
			add = -100
			desc = "ARTIFACT_USELESS_BANNER_REASON"
		}

		# Opinion of seller (-12 to 12 depending on opinion)
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = at_buy_sell_artifact_opinion_multiplier
			desc = "AI_OPINION_REASON"
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			scope:recipient = {
				has_relation_rival = scope:actor
			}
			add = -100
			desc = "ACTOR_RIVAL_TO_ME_REASON"
		}
		modifier = {
			scope:recipient = {
				has_relation_nemesis = scope:actor
			}
			add = -200
			desc = "ACTOR_NEMESIS_TO_ME_REASON"
		}

		modifier = {
			scope:recipient.short_term_gold < medium_gold_value
			factor = 0
		}

		modifier = {
			scope:target.at_artifact_bid_price_minus_repair_cost_value <= 0
			factor = 0
			desc = "at_target_worth_less_than_repair_cost_reason"
		}
	}
}
