# Sell one of your artifacts to another ruler.
# Scopes: actor is the artifact owner (seller), recipient is the buyer, target is the artifact.
at_sell_artifact_interaction = {
	category = interaction_category_diplomacy
	desc = at_sell_artifact_interaction_desc
	interface_priority = 60
	common_interaction = yes
	needs_recipient_to_open = yes
	icon = artisan_inspiration

	target_type = artifact
	target_filter = actor_artifacts

	greeting = positive
	send_name = at_sell_artifact_interaction

	ai_min_reply_days = 0
	ai_max_reply_days = 0

	# TODO If the target is an artifact of scope:actor that they are likely to sell,
	# redirect to a random ruler within trading range who is likely to buy the artifact

	is_shown = {
		NOT = { scope:actor = scope:recipient }
		trigger_if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:recipient = {
				at_valid_buyer_or_seller_trigger = { PARTY = scope:actor }
			}
		}
		scope:actor = {
			has_any_artifact = yes
		}
		NAND = { # Prevent ai from spamming you with sell artifact requests
			scope:actor = { is_ai = yes }
			scope:recipient = { is_ai = no }
		}
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			at_candidate_to_sell_artifact_to_trigger = { PARTY = scope:actor }
		}
		scope:actor = {
			is_imprisoned = no
			trigger_if = {
				limit = { is_ai = no }
				custom_description = {
					text = "any_unequipped_artifact_tt"
					any_character_artifact = {
						is_equipped = no
					}
				}
			}
		}
	}

	can_be_picked_artifact = {
		scope:actor = {
			any_character_artifact = {
				this = scope:target
			}
		}
		trigger_if = {
			limit = {
				scope:actor = { is_ai = no }
			}
			scope:target = { is_equipped = no }
			trigger_if = {
				limit = {
					has_global_variable = at_artifacts_window_selected_artifact
				}
				global_var:at_artifacts_window_selected_artifact = scope:target
			}
		}
	}

	# Use hook
	send_option = {
		is_valid = {
			exists = scope:recipient
			scope:actor = {
				has_usable_hook = scope:recipient
			}
		}
		flag = hook
		localization = SCHEME_HOOK
	}
	should_use_extra_icon = {
		scope:actor = { has_usable_hook = scope:recipient }
	}
	extra_icon = "gfx/interface/icons/character_interactions/hook_icon.dds"

	send_options_exclusive = no

	on_accept = {
		if = {
			limit = { scope:hook = yes }
			scope:actor = { use_hook = scope:recipient }
		}
		scope:actor = { save_scope_as = seller }
		scope:recipient = { save_scope_as = buyer }
		scope:target = { save_scope_as = artifact }
		at_buy_artifact_interaction_effect = {
			ARTIFACT_PRICE = scope:artifact.at_artifact_bid_price_minus_repair_cost_value
		}
	}

	auto_accept = {
		custom_description = {
			text = "spending_hook"
			subject = scope:actor
			object = scope:recipient
			scope:hook = yes
			scope:actor = { has_strong_hook = scope:recipient }
		}
	}

	ai_accept = {
		base = 0

		modifier = {
			add = -50
			desc = at_reluctant_to_spend_gold_reason
		}

		modifier = {
			scope:hook = yes
			add = 50
			desc = SCHEME_WEAK_HOOK_USED
		}

		# Avoid spending money if at war
		modifier = {
			is_at_war = yes
			add = -50
			desc = IS_AT_WAR_REASON
		}

		# Artifact claims
		modifier = {
			scope:target = { can_be_claimed_by = scope:recipient }
			add = at_ai_positive_claim_impact_value
			desc = ARTIFACT_CLAIM_REASON
		}

		# Difference between the QWA of the target artifact
		# and the QWA of the worst artifact of the same type equipped by the recipient (0 to PIV)
		modifier = {
			save_temporary_scope_as = buyer
			scope:target.at_artifact_quality_wealth_average_difference_value > 0
			add = {
				value = scope:target.at_artifact_quality_wealth_average_difference_value
				divide = 100
				multiply = at_ai_positive_qwa_difference_impact_value
			}
			desc = at_target_better_than_currently_equipped_reason
		}

		# Artifact durability (0 to NIV)
		modifier = {
			scope:target.artifact_durability < scope:target.artifact_max_durability
			add = {
				value = scope:target.artifact_max_durability
				subtract = scope:target.artifact_durability
				divide = scope:target.artifact_max_durability
				multiply = at_ai_negative_durability_impact_value
			}
			desc = at_target_below_max_durability_reason
		}

		# TODO Artifact modifiers and recipient lifestyle

		# Useless, not relevant, unwanted, or cursed artifacts
		modifier = {
			NOT = { can_equip_artifact = scope:target }
			add = -100
			desc = ARTIFACT_NOT_EQUIPPABLE_REASON
		}
		modifier = {
			NOT = { can_benefit_from_artifact = scope:target }
			add = -50
			desc = ARTIFACT_NOT_BENEFIT_REASON
		}
		modifier = {
			scope:target = { has_variable = unwanted_artifact }
			add = -500
			desc = ARTIFACT_CURSED_REASON
		}
		modifier = {
			scope:target = { has_variable = cursed_artifact }
			add = -1000
			desc = ARTIFACT_CURSED_REASON
		}

		# Dynasty banner
		modifier = {
			exists = scope:target.var:banner_dynasty
			exists = scope:recipient.dynasty
			scope:recipient = scope:target.var:banner_dynasty.dynast
			add = 50
			desc = ARTIFACT_DYNASTY_BANNER_REASON
		}

		# Useless banner
		modifier = {
			OR = {
				exists = scope:target.var:banner_dynasty
				exists = scope:target.var:banner_house
			}
			exists = scope:recipient.house
			trigger_if = {
				limit = { exists = scope:target.var:banner_dynasty }
				NOT = { scope:target.var:banner_dynasty = scope:recipient.dynasty }
			}
			trigger_else = {
				NOT = { scope:target.var:banner_house = scope:recipient.house }
			}
			add = -100
			desc = ARTIFACT_USELESS_BANNER_REASON
		}

		# TODO Price (PIV if price < minor_gold_value, NIV if price > major_gold_value)

		# Opinion of seller
		opinion_modifier = {
			trigger = {
				NOT = { scope:actor = scope:recipient }
			}
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = at_buy_sell_artifact_ai_opinion_multiplier
			desc = AI_OPINION_REASON
		}

		# Avoid doing business with rivals or nemesises
		modifier = {
			has_relation_rival = scope:actor
			add = -100
			desc = ACTOR_RIVAL_TO_ME_REASON
		}
		modifier = {
			has_relation_nemesis = scope:actor
			add = -200
			desc = ACTOR_NEMESIS_TO_ME_REASON
		}
	}

	# TODO AI
}
