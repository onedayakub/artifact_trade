window = {
	name = "at_artifacts_window"
	position = { 0 20 }
	parentanchor = center

	using = Window_Background
	using = Window_Decoration_Spike

	state = {
		name = _show
		using = Animation_FadeIn_Quick
		using = Sound_WindowShow_Standard
	}

	state = {
		name = _hide
		using = Animation_FadeOut_Quick
		using = Sound_WindowHide_Standard
	}

	visible = "[GetVariableSystem.HasValue('at_artifacts_window_visible', 'yes')]"

	vbox = {
		margin_bottom = 28
		set_parent_size_to_minimum = yes

		using = Window_Margins
		using = Window_Background

		header_pattern = {
			layoutpolicy_horizontal = expanding
			minimumsize = { 100% 0 }

			blockoverride "header_text"
			{
				text = "[SelectLocalization(GetVariableSystem.HasValue('at_artifacts_window_flavor', 'sell'), 'AT_SELL_ARTIFACTS', SelectLocalization(GetVariableSystem.HasValue('at_artifacts_window_flavor', 'buy'), 'AT_BUY_ARTIFACTS', 'AT_FIND_ARTIFACTS'))]"
			}

			blockoverride "button_close"
			{
				onclick = "[GetVariableSystem.Set('at_artifacts_window_visible', 'no')]"
				onclick = "[GetScriptedGui('at_artifacts_window_close_gui').Execute(GuiScope.SetRoot(GetPlayer.MakeScope).End)]"
			}
		}

		vbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			margin = { 14 10 }

			hbox = { # artifact sorting
				layoutpolicy_horizontal = expanding
				margin = { 10 5 }
				spacing = 5

				button_standard = {
					datacontext = "[GetScriptedGui('at_artifacts_window_toggle_artifact_sort_order_gui')]"
					size = { 25 25 }
					tooltip = "ARTIFACT_SORT_ORDER_TOOLTIP"
					using = tooltip_ne
					onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag(GetVariableSystem.Get('at_artifacts_window_flavor'))).End)]"

					button_icon = {
						size = { 25 25 }
						texture = "gfx/interface/icons/flat_icons/sort_icon.dds"
						framesize = { 66 66 }
						frame = "[BoolTo1And2(GetPlayer.MakeScope.Var('at_artifacts_window_is_artifact_sort_order_ascending').IsSet)]"

						alwaystransparent = yes

						blockoverride "button_frames"
						{
							effectname = "NoHighlight"
						}
					}
				}

				dropdown_menu_standard = {
					datacontext = "[GetScriptedGui('at_artifacts_window_select_artifact_sort_option_gui')]"

					blockoverride "dropdown_properties"
					{
						datamodel = "[GetPlayer.MakeScope.GetList('at_artifacts_window_artifact_sort_options')]"
						onselectionchanged = "[PdxGuiWidget.FindChild('selected_artifact_sort_option').TriggerAnimation('select_artifact_sort_option')]"
						#selectedindex = "[0]"
					}

					blockoverride "dropdown_active_item_properties"
					{
						name = "selected_artifact_sort_option"
						text = "[Localize(Concatenate('at', GetPlayer.MakeScope.Var('at_artifacts_window_selected_artifact_sort_option').GetFlagName))]"
						state = {
							name = "select_artifact_sort_option"
							on_start = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('sort_option', MakeScopeFlag(Scope.GetFlagName)).AddScope('flavor', MakeScopeFlag(GetVariableSystem.Get('at_artifacts_window_flavor'))).End)]"
						}
					}

					blockoverride "dropdown_item_properties"
					{
						text = "[Localize(Concatenate('at', Scope.GetFlagName))]"
					}
				}

				expand = {}
			}

			scrollbox = {
				layoutpolicy_horizontal = expanding
				size = { 600 800 }

				blockoverride "scrollbox_content"
				{
					vbox = {
						datamodel = "[GetPlayer.MakeScope.GetList('at_artifacts_window_artifacts')]"
						layoutpolicy_horizontal = expanding
						spacing = 5

						item = {
							widget = {
								layoutpolicy_horizontal = expanding
								size = { 560 90 }

								button_standard = {
									datacontext = "[Scope.Artifact]"
									datacontext = "[GetScriptedGui('at_artifacts_window_set_selected_artifact_gui')]"
									size = { 100% 100% }

									onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('artifact', Artifact.MakeScope).End)]"

									down = "[EqualTo_uint32(Artifact.GetID, GetPlayer.MakeScope.Var('at_artifacts_window_selected_artifact').Artifact.GetID)]"

									hbox = {
										widget = {
											size = { 80 80 }
											alwaystransparent = yes

											button_artifact = {
												size = { 100% 100% }
											}
										}

										vbox = {
											layoutpolicy_horizontal = expanding
											layoutpolicy_vertical = expanding

											tooltipwidget = {
												artifact_tooltip = {}
											}

											expand = {}

											hbox = {
												layoutpolicy_horizontal = expanding

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[Artifact.GetRarityAndSlotType]"
													max_width = 300
													using = Font_Size_Small
												}

												expand = {}
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												text_multi = {
													layoutpolicy_horizontal = expanding
													text = "[Artifact.GetNameNoTooltip]"
													max_width = 350
													using = Font_Size_Medium
													default_format = "#high"
													autoresize = yes
													alwaystransparent = yes
												}

												expand = {}
											}

											hbox = {
												layoutpolicy_horizontal = expanding

												hbox_artifact_durability = {
													# simple tooltip override so that the durability tooltip doesnt show up here
													tooltip = ""
												}

												expand = {}

												text_single = {
													layoutpolicy_horizontal = expanding
													text = "[gold_i][Artifact.MakeScope.ScriptValue('at_artifact_base_price_value')|0]"
													max_width = 60
													using = Font_Size_Small
													align = nobaseline
												}

												spacer = {
													size = { 10 0 }
												}
											}

											expand = {}
										}

										portrait_head_small = {
											datacontext = "[Artifact.GetOwner]"
										}

										expand = {}
									}
								}
							}
						}
					}
				}
			}
		}

		expand = {
			minimumsize = { 0 10 }
		}

		button_primary_big = {
			datacontext = "[GetScriptedGui('at_artifacts_window_send_gui')]"
			visible = "[Not(GetVariableSystem.HasValue('at_artifacts_window_flavor', 'find'))]"
			text = "[SelectLocalization(GetVariableSystem.HasValue('at_artifacts_window_flavor', 'sell'), 'AT_SELL_ARTIFACT', 'AT_BUY_ARTIFACT')]"
			enabled = "[ScriptedGui.IsValid(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag(GetVariableSystem.Get('at_artifacts_window_flavor'))).End)]"

			onclick = "[GetVariableSystem.Set('at_artifacts_window_visible', 'no')]"
			onclick = "[ScriptedGui.Execute(GuiScope.SetRoot(GetPlayer.MakeScope).AddScope('flavor', MakeScopeFlag(GetVariableSystem.Get('at_artifacts_window_flavor'))).End)]"
		}
	}
}
